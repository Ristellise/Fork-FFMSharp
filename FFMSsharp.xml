<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FFMSsharp</name>
    </assembly>
    <members>
        <member name="T:FFMSsharp.SampleFormat">
            <summary>
            Identifies various audio sample formats
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_SampleFormat</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.SampleFormat.uint8_t">
            <summary>
            One 8-bit unsigned integer (uint8_t) per sample
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_FMT_U8</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.SampleFormat.int16_t">
            <summary>
            One 16-bit signed integer (int16_t) per sample
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_FMT_S16</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.SampleFormat.int32_t">
            <summary>
            One 32-bit signed integer (int32_t) per sample
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_FMT_S32</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.SampleFormat.float_t">
            <summary>
            One 32-bit (single precision) floating point value (float_t) per sample
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_FMT_FLT</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.SampleFormat.double_t">
            <summary>
            One 64-bit (double precision) floating point value (double_t) per sample
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_FMT_DBL</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.AudioChannel">
            <summary>
            Describes the audio channel layout of an audio stream
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_AudioChannel</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.FrontLeft">
            <summary>
            Front Left
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_FRONT_LEFT</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.FrontRight">
            <summary>
            Front Right
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_FRONT_RIGHT</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.FrontCenter">
            <summary>
            Front Center
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_FRONT_CENTER</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.LowFrequency">
            <summary>
            Low Frequency Effects
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_LOW_FREQUENCE</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.BackLeft">
            <summary>
            Back Left
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_BACK_LEFT</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.BackRight">
            <summary>
            Back Right
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_BACK_RIGHT</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.FrontLeftOfCenter">
            <summary>
            Front Left of Center
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_FRONT_LEFT_OF_CENTER</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.FrontRightOfCenter">
            <summary>
            Front Right of Center
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_FRONT_RIGHT_OF_CENTER</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.BackCenter">
            <summary>
            Back Center
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_BACK_CENTER</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.SideLeft">
            <summary>
            Side Left
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_SIDE_LEFT</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.SideRight">
            <summary>
            Side Right
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_SIDE_RIGHT</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.TopCenter">
            <summary>
            Top Center
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_TOP_CENTER</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.TopFrontLeft">
            <summary>
            Top Front Left
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_TOP_FRONT_LEFT</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.TopFrontCenter">
            <summary>
            Top Front Center
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_TOP_FRONT_CENTER</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.TopFrontRight">
            <summary>
            Top Front Right
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_TOP_FRONT_RIGHT</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.TopBackLeft">
            <summary>
            Top Back Left
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_TOP_BACK_LEFT</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.TopBackCenter">
            <summary>
            Top Back Center
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_TOP_BACK_CENTER</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.TopBackRight">
            <summary>
            Top Back Right
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_TOP_BACK_RIGHT</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.StereoLeft">
            <summary>
            Stereo Left
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_STEREO_LEFT</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioChannel.StereoRight">
            <summary>
            Stereo Right
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CH_STERO_RIGHT</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.AudioSource">
            <summary>
            Video source
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_AudioSource</c>.</para>
            <para>See <see cref="M:FFMSsharp.Index.AudioSource(System.String,System.Int32,FFMSsharp.AudioDelayModes)">Index.AudioSource</see> on how to create a <see cref="T:FFMSsharp.AudioSource">AudioSource object</see>.</para>
            <para>Note that there is no equivalent for FFMS2's <c>FFMS_GetAudioProperties</c> as it is called during construction of the <see cref="T:FFMSsharp.AudioSource">AudioSource object</see>.</para>
            </remarks>
        </member>
        <member name="M:FFMSsharp.AudioSource.Finalize">
            <summary>
            Audio source destructor
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_DestroyAudioSource</c>.</para>
            </remarks>
        </member>
        <member name="M:FFMSsharp.AudioSource.GetAudio(System.Int64,System.Int64)">
            <summary>
            Decode a number of audio samples
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetAudio</c>.</para>
            <para>The output is <paramref name="Count"/> samples long, starting from <paramref name="Start"/> (inclusive).</para>
            </remarks>
            <param name="Start">The first sample to decode
            <para>Sample numbers start from zero and hence the last sample in the stream is number <see cref="P:FFMSsharp.AudioSource.NumSamples"/> minus 1.</para>
            </param>
            <param name="Count">The amount of samples to decode
            <para>Sample numbers start from zero and hence the last sample in the stream is number <see cref="P:FFMSsharp.AudioSource.NumSamples"/> minus 1.</para>
            </param>
            <returns>The raw audio data</returns>
            <exception cref="T:FFMSsharp.FFMSException"/>
            <threadsafety instance="false"/>
            <exception cref="T:System.ArgumentOutOfRangeException">Trying to access audio samples that are out of range of the stream.</exception>
        </member>
        <member name="M:FFMSsharp.AudioSource.GetTrack">
            <summary>
            Retrieves track info
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetTrackFromAudio</c>.</para>
            <para>It's generally safer to use this function instead of <see cref="M:FFMSsharp.Index.GetTrack(System.Int32)">Index.GetTrack</see>, since unlike that function it cannot cause access violations if you specified an nonexistent track number, return a <see cref="T:FFMSsharp.Track">Track object</see> that doesn't actually contain any indexing information, or return an object that ceases to be valid when the index is destroyed.</para>
            <para>Note that the returned <see cref="T:FFMSsharp.Track">Track object</see> is only valid until its parent <see cref="T:FFMSsharp.AudioSource">AudioSource object</see> is destroyed. </para>
            </remarks>
            <returns>The generated <see cref="T:FFMSsharp.Track">Track object</see></returns>
        </member>
        <member name="P:FFMSsharp.AudioSource.SampleFormat">
            <summary>
            Audio sample format
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_AudioProperties->SampleFormat</c>.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.AudioSource.SampleRate">
            <summary>
            Sample rate, in samples per second
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_AudioProperties->SampleRate</c>.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.AudioSource.BitsPerSample">
            <summary>
            Bits per audio sample
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_AudioProperties->BitsPerSample</c>.</para>
            <para>Note that this signifies the number of bits actually used to code each sample, not the number of bits used to store each sample, and may hence be different from what the SampleFormat would imply.</para>
            <para>Figuring out which bytes are significant and which aren't is left as an exercise for the reader.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.AudioSource.Channels">
            <summary>
            The number of audio channels
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_AudioProperties->Channels</c>.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.AudioSource.ChannelLayout">
            <summary>
            The channel layout of the audio stream
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_AudioProperties-&gt;ChannelLayout</c>.</para>
            <para>Constructed by binary OR'ing the relevant integers from <see cref="T:FFMSsharp.AudioChannel"/> together, which means that if the audio has the channel AudioChannel.Example, the operation (ChannelOrder &amp; AudioChannel.Example) will evaluate to true.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.AudioSource.NumSamples">
            <summary>
            The number of samples in the audio track
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_AudioProperties->NumSamples</c>.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.AudioSource.FirstTime">
            <summary>
            The first timestamp of the stream, in seconds
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_AudioProperties-&gt;FirstTime</c>.</para>
            <para>Useful if you want to know if the stream has a delay, or for quickly determining its length in seconds.</para>
            </remarks>
            <seealso cref="P:FFMSsharp.AudioSource.LastTime"/>
        </member>
        <member name="P:FFMSsharp.AudioSource.LastTime">
            <summary>
            The last timestamp of the stream, in seconds
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_AudioProperties-&gt;LastTime</c>.</para>
            <para>Useful if you want to know if the stream has a delay, or for quickly determining its length in seconds.</para>
            </remarks>
            <seealso cref="P:FFMSsharp.AudioSource.FirstTime"/>
        </member>
        <member name="T:FFMSsharp.FFMS_Errors">
            <summary>Used to identify errors.</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_SUCCESS">
            <summary>No error.</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_INDEX">
            <summary>Index file handling</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_INDEXING">
            <summary>Indexing</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_POSTPROCESSING">
            <summary>Video post-processing (libpostproc)</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_SCALING">
            <summary>Image scaling (libswscale)</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_DECODING">
            <summary>Audio/Video decoding</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_SEEKING">
            <summary>Seeking</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_PARSER">
            <summary>File parsing</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_TRACK">
            <summary>Track handling</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_WAVE_WRITER">
            <summary>WAVE64 file writer</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_CANCELLED">
            <summary>Operation aborted</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_RESAMPLING">
            <summary>Audio re-sampling (libavresample)</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_UNKNOWN">
            <summary>Unknown error</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_UNSUPPORTED">
            <summary>Format or operation is not supported with this binary</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_FILE_READ">
            <summary>Cannot read from file</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_FILE_WRITE">
            <summary>Cannot write to file</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_NO_FILE">
            <summary>No such file or directory</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_VERSION">
            <summary>Wrong version</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_ALLOCATION_FAILED">
            <summary>Out of memory</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_INVALID_ARGUMENT">
            <summary>Invalid or nonsensical argument</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_CODEC">
            <summary>Decoder error</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_NOT_AVAILABLE">
            <summary>Requested mode or operation unavailable in this binary</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_FILE_MISMATCH">
            <summary>Provided index does not match the file</summary>
        </member>
        <member name="F:FFMSsharp.FFMS_Errors.FFMS_ERROR_USER">
            <summary>Problem exists between keyboard and chair</summary>
        </member>
        <member name="T:FFMSsharp.FFMSException">
            <summary>
            Generic parent class for all other FFMS exceptions
            </summary>
        </member>
        <member name="M:FFMSsharp.FFMSException.#ctor">
            <summary></summary>
        </member>
        <member name="M:FFMSsharp.FFMSException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary></summary>
        </member>
        <member name="T:FFMSsharp.FFMSUnknownErrorException">
            <summary>
            Unknown error
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ERROR_UNKNOWN</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.FFMSUnsupportedException">
            <summary>
            Format or operation is not supported with this binary
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ERROR_UNSUPPORTED</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.FFMSFileReadException">
            <summary>
            Cannot read from file
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ERROR_FILE_READ</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.FFMSFileWriteException">
            <summary>
            Cannot write to file
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ERROR_FILE_WRITE</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.FFMSNoFileException">
            <summary>
            No such file or directory
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ERROR_NO_FILE</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.FFMSVersionException">
            <summary>
            Wrong version
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ERROR_VERSION</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.FFMSAllocationFailedException">
            <summary>
            Out of memory
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ERROR_ALLOCATION_FAILED</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.FFMSInvalidArgumentException">
            <summary>
            Invalid or nonsensical argument
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ERROR_INVALID_ARGUMENT</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.FFMSCodecException">
            <summary>
            Decoder error
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ERROR_CODEC</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.FFMSNotAvailableException">
            <summary>
            Requested mode or operation unavailable in this binary
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ERROR_NOT_AVAILABLE</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.FFMSFileMismatchException">
            <summary>
            Provided index does not match the file
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ERROR_FILE_MISMATCH</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.FFMSUserException">
            <summary>
            Problem exists between keyboard and chair
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ERROR_USER</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.ColorSpaces">
            <summary>
            Identifies the color coefficients used for a YUV stream
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ColorSpaces</c>.</para>
            <para>The numerical constants are the same as in the MPEG-2 specification.</para>
            <para>Some of these are specified or aliased in a number of places.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.ColorSpaces.RGB">
            <summary>
            RGB
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CS_RGB</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.ColorSpaces.BT709">
            <summary>
            ITU-T Rec. 709
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CS_BT709</c>.</para>
            <para>Equivalent to ITU-R BT1361, IEC 61966-2-4 xvYCC709 and SMPTE RP177 Annex B.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.ColorSpaces.Unspecified">
            <summary>
            Unspecified
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CS_UNSPECIFIED</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.ColorSpaces.FCC">
            <summary>
            FCC
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CS_FCC</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.ColorSpaces.BT470BG">
            <summary>
            ITU-R BT. 470
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CS_BT470BG</c>.</para>
            <para>Also known as ITU-T Rec. 601.</para>
            <para>Equivalent to ITU-R BT601-6 625, ITU-R BT1358 625, ITU-R BT1700 625 PAL &amp; SECAM and IEC 61966-2-4 xvYCC601.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.ColorSpaces.SMPTE170M">
            <summary>
            SMPTE standard 170 M
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CS_SMPTE170M</c>.</para>
            <para>Functionally the same as BT470BG, and is furthermore equivalent to ITU-R BT601-6 525, ITU-R BT1358 525, and ITU-R BT1700 NTSC.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.ColorSpaces.SMPTE240M">
            <summary>
            SMPTE standard 240 M
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CS_SMPTE240M</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.ColorRanges">
            <summary>
            Identifies the valid range of luma values in a YUV stream
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ColorRanges</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.ColorRanges.Unspecified">
            <summary>
            Unspecified
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CR_UNSPECIFIED</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.ColorRanges.MPEG">
            <summary>
            TV range
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CR_MPEG</c>.</para>
            <para>Valid luma values range from 16 to 235 with 8-bit color.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.ColorRanges.JPEG">
            <summary>
            Full range
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CR_JPEG</c>.</para>
            <para>All representable luma values are valid.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.Frame">
            <summary>
            A single video frame
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Frame</c>.</para>
            <para>See <see cref="M:FFMSsharp.VideoSource.GetFrame(System.Int32)">VideoSource.GetFrame</see> on how to create a <see cref="T:FFMSsharp.Frame">Frame object</see>.</para>
            </remarks>
        </member>
        <member name="M:FFMSsharp.Frame.GetBitmap">
            <summary>
            Turn the pixel data into a <see cref="T:System.Drawing.Bitmap">Bitmap</see>
            </summary>
            <remarks>
            <para>This function only works if you've <see cref="M:FFMSsharp.VideoSource.SetOutputFormat(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32,FFMSsharp.Resizers)">set the PixelFormat</see> to "bgra".</para>
            </remarks>
            <returns>The generated <see cref="T:System.Drawing.Bitmap">Bitmap object</see></returns>
        </member>
        <member name="P:FFMSsharp.Frame.Data">
            <summary>
            An array of pointers to the pixel data
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Frame-&gt;Data</c>.</para>
            <para>Planar formats use more than one plane, for example YV12 uses one plane each for the Y, U and V data.</para>
            <para>Packed formats (such as the various RGB32 flavors) use only the first plane.</para>
            <para>If you want to determine if plane i contains data or not, check for <see cref="P:FFMSsharp.Frame.Linesize"/>[i] != 0.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.Frame.Linesize">
            <summary>
            An array of integers representing the length of each scan line in each of the four picture planes, in bytes
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Frame-&gt;Linesize</c>.</para>
            <para>In alternative terminology, this is the "pitch" of the plane.</para>
            <para>Usually, the total size in bytes of picture plane i is <see cref="P:FFMSsharp.Frame.Linesize"/>[i] * <see cref="P:FFMSsharp.Frame.Resolution">Resolution.Height</see>, but do note that some pixel formats (most notably YV12) has vertical chroma subsampling, and then the U/V planes may be of a different height than the primary plane.</para>
            <para>This may be negative; if so the image is stored inverted in memory and Data actually points of the last row of the data.</para>
            <para>You usually do not need to worry about this, as it mostly works correctly by default if you're processing the image correctly.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.Frame.EncodedResolution">
            <summary>
            The original resolution of the frame (in pixels)
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Frame->EncodedWidth</c> and <c>EncodedHeight</c>.</para>
            <para>As encoded in the compressed file, before any scaling was applied.</para>
            <para>Note that this must not necessarily be the same for all frames in a stream.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.Frame.EncodedPixelFormat">
            <summary>
            The original pixel format of the frame
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Frame->EncodedPixelFormat</c>.</para>
            <para>As encoded in the compressed file.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.Frame.Resolution">
            <summary>
            The output resolution of the frame (in pixels)
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Frame-&gt;ScaledWidth</c> and <c>ScaledHeight</c>.</para>
            <para>The resolution of what is actually stored in the <see cref="P:FFMSsharp.Frame.Data"/> field.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.Frame.PixelFormat">
            <summary>
            The output pixel format of the frame
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Frame-&gt;ConvertedPixelFormat</c>.</para>
            <para>The pixel format of what is actually stored in the <see cref="P:FFMSsharp.Frame.Data"/> field.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.Frame.KeyFrame">
            <summary>
            Is this a keyframe?
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Frame->KeyFrame</c>.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.Frame.RepeatPict">
            <summary>
            An integer representing the RFF flag for this frame
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Frame-&gt;RepeatPict</c>.</para>
            <para>The frame shall be displayed for 1+<see cref="P:FFMSsharp.Frame.RepeatPict"/> time units, where the time units are expressed in the special RFF timebase available in <see cref="P:FFMSsharp.VideoSource.RFFNumerator"/> and <see cref="P:FFMSsharp.VideoSource.RFFDenominator"/>.</para>
            <para>Note that if you actually end up using this, you need to ignore the usual timestamps (calculated via the <see cref="P:FFMSsharp.Track.TimeBaseNumerator"/>/<see cref="P:FFMSsharp.Track.TimeBaseDenominator"/> and the <see cref="P:FFMSsharp.FrameInfo.PTS"/>) since they are fundamentally incompatible with RFF flags.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.Frame.InterlacedFrame">
            <summary>
            Is this an interlaced frame?
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Frame->InterlacedFrame</c>.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.Frame.TopFieldFirst">
            <summary>
            Is the top field first?
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Frame-&gt;TopFieldFirst</c>.</para>
            <para>Only relevant if <see cref="P:FFMSsharp.Frame.InterlacedFrame"/> is nonzero.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.Frame.FrameType">
            <summary>
            A single character denoting coding type (I/B/P etc) of the compressed frame
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Frame.PictType</c>.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.Frame.ColorSpace">
            <summary>
            Identifies the YUV color coefficients used in the frame
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Frame-&gt;ColorSpace</c>.</para>
            </remarks>
            <seealso cref="T:FFMSsharp.ColorSpaces"/>
        </member>
        <member name="P:FFMSsharp.Frame.ColorRange">
            <summary>
            Identifies the luma range of the frame
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Frame-&gt;ColorRange</c>.</para>
            </remarks>
            <seealso cref="T:FFMSsharp.ColorRanges"/>
        </member>
        <member name="T:FFMSsharp.FrameInfo">
            <summary>
            Information about a single video frame
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_FrameInfo</c>.</para>
            <para>See <see cref="M:FFMSsharp.Track.GetFrameInfo(System.Int32)">Track.GetFrameInfo</see> on how to create a <see cref="T:FFMSsharp.FrameInfo">FrameInfo object</see>.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.FrameInfo.PTS">
            <summary>
            The decoding timestamp of the frame
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_FrameInfo-&gt;PTS</c>.</para>
            <para>To convert this to a timestamp in wallclock milliseconds, use the relation long timestamp = (long)((<see cref="P:FFMSsharp.FrameInfo.PTS"/> * <see cref="P:FFMSsharp.Track.TimeBaseNumerator">Track.TimeBase.Numerator</see>) / (double)<see cref="P:FFMSsharp.Track.TimeBaseDenominator">Track.TimeBase.Denumerator</see>).</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.FrameInfo.RepeatPict">
            <summary>
            RFF flag for the frame
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_FrameInfo-&gt;RepeatPict</c>.</para>
            </remarks>
            <seealso cref="P:FFMSsharp.Frame.RepeatPict"/>
        </member>
        <member name="P:FFMSsharp.FrameInfo.KeyFrame">
            <summary>
            Is this a keyframe?
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_FrameInfo->KeyFrame</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.SeekMode">
            <summary>
            Used to control the way seeking is handled
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_SeekMode</c>.</para>
            </remarks>
            <seealso cref="T:FFMSsharp.VideoSource"/>
        </member>
        <member name="F:FFMSsharp.SeekMode.LinearNoRewind">
            <summary>
            Linear access without rewind
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_SEEK_LINEAR_NO_RW</c>.</para>
            <para>Will throw an error if each successive requested frame number isn't bigger than the last one.</para>
            <para>Only intended for opening images but might work on well with some obscure video format.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.SeekMode.Linear">
            <summary>
            Linear access
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_SEEK_LINEAR</c>.</para>
            <para>If you request frame n without having requested frames 0 to n-1 in order first, all frames from 0 to n will have to be decoded before n can be delivered.</para>
            <para>The definition of slow, but should make some formats "usable".</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.SeekMode.Normal">
            <summary>
            Safe normal
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_SEEK_NORMAL</c>.</para>
            <para>Bases seeking decisions on the keyframe positions reported by libavformat.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.SeekMode.Unsafe">
            <summary>
            Unsafe normal
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_SEEK_UNSAFE</c>.</para>
            <para>Same as <see cref="F:FFMSsharp.SeekMode.Normal"/> but no error will be thrown if the exact destination has to be guessed.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.SeekMode.Aggressive">
            <summary>
            Aggressive
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_SEEK_AGGRESSIVE</c>.</para>
            <para>Seeks in the forward direction even if no closer keyframe is known to exist.</para>
            <para>Only useful for testing and containers where libavformat doesn't report keyframes properly.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.IndexErrorHandling">
            <summary>
            Used to control behavior when a decoding error is encountered
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_IndexErrorHandling</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.IndexErrorHandling.Abort">
            <summary>
            Abort indexing and raise an exception
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_IEH_ABORT</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.IndexErrorHandling.ClearTrack">
            <summary>
            Clear all indexing entries for the track
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_IEH_CLEAR_TRACK</c>.</para>
            <para>Returns a blank track.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.IndexErrorHandling.StopTrack">
            <summary>
            Stop indexing but keep previous indexing entries
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_IEH_STOP_TRACK</c>.</para>
            <para>Returns a track that stops where the error occurred.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.IndexErrorHandling.Ignore">
            <summary>
            Ignore the error and pretend it's raining
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_IEH_IGNORE</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.AudioDelayModes">
            <summary>
            Controls how audio with a non-zero first PTS is handled
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_AudioDelayModes</c>.</para>
            <para>In other words: what FFMS does about audio delay.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioDelayModes.NoShift">
            <summary>
            No adjustment is made
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_DELAY_NO_SHIFT</c>.</para>
            <para>The first decodable audio sample becomes the first sample in the output.</para>
            <para>May lead to audio/video desync.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioDelayModes.TimeZero">
            <summary>
            Samples are created (with silence) or discarded so that sample 0 in the decoded audio starts at time zero
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_DELAY_TIME_ZERO</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.AudioDelayModes.FirstVideoTrack">
            <summary>
            Samples are created (with silence) or discarded so that sample 0 in the decoded audio starts at the same time as frame 0 of the first video track
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_DELAY_FIRST_VIDEO_TRACK</c>.</para>
            <para>This is what most users want and is a sane default.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.Index">
            <summary>
            Index of a media file
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Index</c>.</para>
            <para>To get an Index for a media file you haven't indexed yet, use the <see cref="T:FFMSsharp.Indexer">Indexer</see> class.</para>
            </remarks>
        </member>
        <member name="M:FFMSsharp.Index.#ctor(System.String)">
            <summary>
            Read an index from disk
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ReadIndex</c>.</para>
            </remarks>
            <param name="IndexFile">Can be an absolute or relative path</param>
            <exception cref="T:System.IO.IOException">Trying to read an invalid index file.</exception>
            <exception cref="T:System.NotSupportedException">Trying to read an index file for a <see cref="T:FFMSsharp.Sources">Source</see> that is not available in the ffms2.dll.</exception>
        </member>
        <member name="M:FFMSsharp.Index.Finalize">
            <summary>
            Index destruction
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_DestroyIndex</c>.</para>
            </remarks>
        </member>
        <member name="M:FFMSsharp.Index.GetSourceType">
            <summary>
            Get which source module was used in creating the index
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetSourceType</c>.</para>
            </remarks>
            <returns>Source module</returns>
            <seealso cref="M:FFMSsharp.Indexer.GetSourceType"/>
        </member>
        <member name="M:FFMSsharp.Index.GetErrorHandling">
            <summary>
            Get which error handling method was used in creating of the index
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetErrorHandling</c>.</para>
            </remarks>
            <returns>Error handling method</returns>
            <seealso cref="M:FFMSsharp.Indexer.Index(FFMSsharp.IndexErrorHandling)"/>
            <seealso cref="M:FFMSsharp.Indexer.Index(System.Collections.Generic.List{System.Int32},FFMSsharp.IndexErrorHandling)"/>
        </member>
        <member name="M:FFMSsharp.Index.GetFirstTrackOfType(FFMSsharp.TrackType)">
            <summary>
            Get the track number of the first track of a specific type
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetFirstTrackOfType</c>.</para>
            </remarks>
            <param name="Type">Track type</param>
            <returns>Track number</returns>
            <exception cref="T:FFMSsharp.FFMSException"/>
            <seealso cref="M:FFMSsharp.Index.GetFirstIndexedTrackOfType(FFMSsharp.TrackType)"/>
        </member>
        <member name="M:FFMSsharp.Index.GetFirstIndexedTrackOfType(FFMSsharp.TrackType)">
            <summary>
            Get the track number of the first indexed track of a specific type
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetFirstIndexedTrackOfType</c>.</para>
            <para>Does the exact same thing as <see cref="M:FFMSsharp.Index.GetFirstTrackOfType(FFMSsharp.TrackType)">GetFirstTrackOfType</see> but ignores tracks that have not been indexed.</para>
            </remarks>
            <param name="Type">Track type</param>
            <returns>Track number</returns>
            <exception cref="T:FFMSsharp.FFMSException"/>
            <seealso cref="M:FFMSsharp.Index.GetFirstTrackOfType(FFMSsharp.TrackType)"/>
        </member>
        <member name="M:FFMSsharp.Index.GetNumTracks">
            <summary>
            Get the total number of tracks in the index
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetNumTracks</c>.</para>
            </remarks>
            <returns>Total number of tracks</returns>
        </member>
        <member name="M:FFMSsharp.Index.WriteIndex(System.String)">
            <summary>
            Write the index to disk
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_WriteIndex</c>.</para>
            </remarks>
            <param name="IndexFile">Can be an absolute or relative path; it will be truncated and overwritten if it already exists</param>
            <exception cref="T:FFMSsharp.FFMSException"/>
        </member>
        <member name="M:FFMSsharp.Index.BelongsToFile(System.String,System.Boolean)">
            <summary>
            Check if the index belongs to a specific file
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_IndexBelongsToFile</c>.</para>
            <para>Makes a heuristic (but very reliable) guess about whether the index is of the <paramref name="SourceFile"/> or not.</para>
            <para>Useful to determine if the index object you just created by <see cref="M:FFMSsharp.Index.#ctor(System.String)">loading an index file from disk</see> is actually relevant to your interests, since the only two ways to pair up index files with source files are a) trust the user blindly, or b) comparing the filenames; neither is very reliable.</para>
            </remarks>
            <param name="SourceFile">File to check against</param>
            <param name="RaiseException">Raise exception on failure</param>
            <returns>True or false depending on the result</returns>
            <exception cref="T:FFMSsharp.FFMSException"/>
        </member>
        <member name="M:FFMSsharp.Index.VideoSource(System.String,System.Int32,System.Int32,FFMSsharp.SeekMode)">
            <summary>
            Create a <see cref="T:FFMSsharp.VideoSource">VideoSource object</see>
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CreateVideoSource</c>.</para>
            <para>Note that the index object is copied into the <see cref="T:FFMSsharp.VideoSource">VideoSource object</see> upon its creation, so once you've created the video source you can generally destroy the index object immediately, since all info you can retrieve from it is also retrievable from the <see cref="T:FFMSsharp.VideoSource">VideoSource object</see>.</para>
            </remarks>
            <param name="SourceFile">The media file. Can be an absolute or relative path</param>
            <param name="Track">Track number of the specific video track</param>
            <param name="Threads">Number of threads used for decoding
            <para>Anything less than 1 will use threads equal to the number of CPU cores.</para>
            <para>Values &gt;1 have no effect if FFmpeg was not compiled with threading support.</para></param>
            <param name="SeekMode">Controls how seeking (random access) is handled and hence affects frame accuracy
            <para>Has no effect on Matroska files, where the equivalent of Normal is always used.</para>
            <para>LinearNoRw may come in handy if you want to open images.</para></param>
            <returns>The generated <see cref="T:FFMSsharp.VideoSource">VideoSource object</see></returns>
            <exception cref="T:FFMSsharp.FFMSException"/>
            <seealso cref="M:FFMSsharp.Index.AudioSource(System.String,System.Int32,FFMSsharp.AudioDelayModes)"/>
            <seealso cref="M:FFMSsharp.Index.GetFirstTrackOfType(FFMSsharp.TrackType)"/>
            <seealso cref="M:FFMSsharp.Index.GetFirstIndexedTrackOfType(FFMSsharp.TrackType)"/>
        </member>
        <member name="M:FFMSsharp.Index.AudioSource(System.String,System.Int32,FFMSsharp.AudioDelayModes)">
            <summary>
            Create an <see cref="T:FFMSsharp.AudioSource">AudioSource object</see>
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CreateAudioSource</c>.</para>
            <para>Note that the index object is copied into the <see cref="T:FFMSsharp.AudioSource">AudioSource object</see> upon its creation, so once you've created the video source you can generally destroy the index object immediately, since all info you can retrieve from it is also retrievable from the <see cref="T:FFMSsharp.AudioSource">AudioSource object</see>.</para>
            </remarks>
            <param name="SourceFile">The media file. Can be an absolute or relative path</param>
            <param name="Track">Track number of the specific audio track</param>
            <param name="DelayMode">Controls how audio with a non-zero first PTS is handled; in other words what FFMS does about audio delay.</param>
            <returns>The generated <see cref="T:FFMSsharp.AudioSource">AudioSource object</see></returns>
            <exception cref="T:FFMSsharp.FFMSException"/>
            <seealso cref="M:FFMSsharp.Index.VideoSource(System.String,System.Int32,System.Int32,FFMSsharp.SeekMode)"/>
            <seealso cref="M:FFMSsharp.Index.GetFirstTrackOfType(FFMSsharp.TrackType)"/>
            <seealso cref="M:FFMSsharp.Index.GetFirstIndexedTrackOfType(FFMSsharp.TrackType)"/>
        </member>
        <member name="M:FFMSsharp.Index.GetTrack(System.Int32)">
            <summary>
            Create a <see cref="T:FFMSsharp.Track">Track object</see>
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetTrackFromIndex</c>.</para>
            <para>Use this function if you don't want to (or cannot) open the track with <see cref="M:FFMSsharp.Index.VideoSource(System.String,System.Int32,System.Int32,FFMSsharp.SeekMode)">VideoSource</see> or <see cref="M:FFMSsharp.Index.AudioSource(System.String,System.Int32,FFMSsharp.AudioDelayModes)">AudioSource</see> first.</para>
            <para>If you already have a <see cref="T:FFMSsharp.VideoSource">VideoSource object</see> or <see cref="T:FFMSsharp.AudioSource">AudioSource object</see> it's safer to use <see cref="M:FFMSsharp.VideoSource.GetTrack">GetTrack</see>/<see cref="M:FFMSsharp.AudioSource.GetTrack">GetTrack</see> instead.</para>
            <para>The returned <see cref="T:FFMSsharp.Track">Track object</see> is only valid until its parent <see cref="T:FFMSsharp.Index">Index object</see> is destroyed.</para>
            <para>Requesting indexing information for a track that has not been indexed will not cause an error, it will just return an empty FFMS_Track (check for &gt;0 frames using <see cref="M:FFMSsharp.Track.GetNumFrames">GetNumFrames</see> to see if the returned object actually contains indexing information).</para>
            </remarks>
            <param name="Track">Track number</param>
            <returns>The generated <see cref="T:FFMSsharp.Track">Track object</see></returns>
            <seealso cref="M:FFMSsharp.Index.GetFirstTrackOfType(FFMSsharp.TrackType)"/>
            <seealso cref="M:FFMSsharp.Index.GetFirstIndexedTrackOfType(FFMSsharp.TrackType)"/>
            <exception cref="T:System.ArgumentOutOfRangeException">Trying to access a Track that doesn't exist.</exception>
        </member>
        <member name="T:FFMSsharp.Sources">
            <summary>
            Identifies source modules
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Sources</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Sources.Default">
            <summary>
            Default
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_SOURCE_DEFAULT</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Sources.Lavf">
            <summary>
            libavformat (Libav/FFmpeg)
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_SOURCE_LAVF</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Sources.Matroska">
            <summary>
            Haali's BSD-licensed native Matroska parsing library
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_SOURCE_MATROSKA</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Sources.Haalimpeg">
            <summary>
            Haali's closed-source DirectShow splitter (MPEG TS/PS)
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_SOURCE_HAALIMPEG</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Sources.Haaliogg">
            <summary>
            Haali's closed-source DirectShow splitter (Ogg/OGM)
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_SOURCE_HAALIOGG</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.IndexingProgressChangeEventArgs">
            <summary>
            Event arguments for the IndexingProgressChange delegate
            </summary>
        </member>
        <member name="P:FFMSsharp.IndexingProgressChangeEventArgs.Current">
            <summary>
            Current amount of indexing done
            </summary>
        </member>
        <member name="P:FFMSsharp.IndexingProgressChangeEventArgs.Total">
            <summary>
            Total amount of indexing to do
            </summary>
        </member>
        <member name="T:FFMSsharp.Indexer">
            <summary>
            Media file indexer
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS2_Indexer</c>.</para>
            </remarks>
        </member>
        <member name="M:FFMSsharp.Indexer.#ctor(System.String,FFMSsharp.Sources)">
            <summary>
            Create an indexer of a media file
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CreateIndexer</c> or <c>FFMS_CreateIndexerWithDemuxer</c>.</para>
            <para>The chosen demuxer gets used for both indexing and decoding later on. Only force one if you know what you're doing.</para>
            <para>Picking a demuxer that doesn't work on your file will not cause automatic fallback on lavf or automatic probing; it'll just cause indexer creation to fail.</para>
            </remarks>
            <param name="SourceFile">The media file</param>
            <param name="Demuxer">What demuxer to use</param>
        </member>
        <member name="M:FFMSsharp.Indexer.Finalize">
            <summary>
            Indexer destruction
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_CancelIndexing</c>.</para>
            </remarks>
        </member>
        <member name="M:FFMSsharp.Indexer.GetSourceType">
            <summary>
            Get which source module was used to open the indexer
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetSourceTypeI</c>.</para>
            </remarks>
            <returns>Source module</returns>
            <seealso cref="M:FFMSsharp.Index.GetSourceType"/>
        </member>
        <member name="M:FFMSsharp.Indexer.GetNumTracks">
            <summary>
            Get the number of tracks
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetNumTrackI</c>.</para>
            <para>Does the same thing as <see cref="M:FFMSsharp.Index.GetNumTracks">Index.GetNumTracks</see> but does not require having the file indexed first.</para>
            </remarks>
            <returns>Total number of tracks</returns>
            <seealso cref="M:FFMSsharp.Index.GetNumTracks"/>
        </member>
        <member name="M:FFMSsharp.Indexer.GetTrackType(System.Int32)">
            <summary>
            Get the track type of a specific track
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetTrackTypeI</c>.</para>
            <para>Does the same thing as <see cref="P:FFMSsharp.Track.Type">Track.Type</see> but does not require having the file indexed first.</para>
            <para>If you have indexed the file, use <see cref="P:FFMSsharp.Track.Type">Track.Type</see> instead since the <c>FFMS_Indexer</c> object is destroyed when the index is created.</para>
            </remarks>
            <param name="Track">Track number</param>
            <returns>Track type</returns>
            <seealso cref="P:FFMSsharp.Track.Type"/>
            <exception cref="T:System.ArgumentOutOfRangeException">Trying to access a Track that doesn't exist.</exception>
        </member>
        <member name="M:FFMSsharp.Indexer.GetCodecName(System.Int32)">
            <summary>
            Get the name of the codec used for a specific track
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS2_GetCodecNameI</c>.</para>
            </remarks>
            <param name="Track">Track number</param>
            <returns>The human-readable name ("long name" in FFmpeg terms) of the codec</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Trying to access a Track that doesn't exist.</exception>
        </member>
        <member name="M:FFMSsharp.Indexer.GetFormatName">
            <summary>
            Get the name of the container format of the media file
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS2_GetFormatNameI</c>.</para>
            </remarks>
            <returns>The human-readable name ("long name" in FFmpeg terms) of the format</returns>
        </member>
        <member name="M:FFMSsharp.Indexer.Index(FFMSsharp.IndexErrorHandling)">
            <summary>
            Index the media file
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS2_DoIndexing</c>.</para>
            <para>This overload will index all <see cref="F:FFMSsharp.TrackType.Audio">Audio</see> tracks.</para>
            </remarks>
            <param name="IndexErrorHandling">Control behavior when a decoding error is encountered</param>
            <returns>The generated <see cref="T:FFMSsharp.Index">Index</see> object</returns>
            <event cref="E:FFMSsharp.Indexer.UpdateIndexProgress">Called to give you an update on indexing progress</event>
            <event cref="E:FFMSsharp.Indexer.OnIndexingCompleted">Called when the indexing has finished</event>
            <exception cref="T:FFMSsharp.FFMSException"/>
        </member>
        <member name="M:FFMSsharp.Indexer.Index(System.Collections.Generic.List{System.Int32},FFMSsharp.IndexErrorHandling)">
            <summary>
            Index the media file
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS2_DoIndexing</c>.</para>
            </remarks>
            <param name="AudioIndex">A list of specific <see cref="F:FFMSsharp.TrackType.Audio">Audio</see> tracks to index</param>
            <param name="IndexErrorHandling">Control behavior when a decoding error is encountered</param>
            <returns>The generated <see cref="T:FFMSsharp.Index">Index</see> object.</returns>
            <event cref="E:FFMSsharp.Indexer.UpdateIndexProgress">Called to give you an update on indexing progress</event>
            <event cref="E:FFMSsharp.Indexer.OnIndexingCompleted">Called when the indexing has finished</event>
            <exception cref="T:FFMSsharp.FFMSException"/>
        </member>
        <member name="P:FFMSsharp.Indexer.IsIndexing">
            <summary>
            Use this to check if the Indexer is currently working
            </summary>
        </member>
        <member name="E:FFMSsharp.Indexer.UpdateIndexProgress">
            <summary>
            Called to give you an update on indexing progress
            </summary>
            <seealso cref="T:FFMSsharp.Indexer.IndexingProgressChange"/>
            <seealso cref="T:FFMSsharp.IndexingProgressChangeEventArgs"/>
        </member>
        <member name="E:FFMSsharp.Indexer.OnIndexingCompleted">
            <summary>
            Called when the indexing has finished
            </summary>
            <seealso cref="T:FFMSsharp.Indexer.IndexingCompleted"/>
        </member>
        <member name="T:FFMSsharp.Indexer.IndexingProgressChange">
            <summary>
            Delegate for the <see cref="E:FFMSsharp.Indexer.UpdateIndexProgress">UpdateIndexProgress</see> event
            </summary>
            <param name="sender">The indexer</param>
            <param name="e">Progress</param>
        </member>
        <member name="T:FFMSsharp.Indexer.IndexingCompleted">
            <summary>
            Delegate for the <see cref="E:FFMSsharp.Indexer.OnIndexingCompleted">OnIndexingCompleted</see> event
            </summary>
            <param name="sender">The indexer</param>
        </member>
        <member name="T:FFMSsharp.TrackType">
            <summary>
            Used for determining the type of a given track
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_TrackType</c>.</para>
            <para>Note that there are currently no functions to handle any type of track other than <see cref="F:FFMSsharp.TrackType.Video"/> and <see cref="F:FFMSsharp.TrackType.Audio"/>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.TrackType.Unknown">
            <summary>
            Unknown
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_TYPE_UNKNOWN</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.TrackType.Video">
            <summary>
            Video
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_TYPE_VIDEO</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.TrackType.Audio">
            <summary>
            Audio
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_TYPE_AUDIO</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.TrackType.Data">
            <summary>
            Data
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_TYPE_DATA</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.TrackType.Subtitle">
            <summary>
            Subtitle
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_TYPE_SUBTITLE</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.TrackType.Attachment">
            <summary>
            Attachment
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_TYPE_ATTACHMENT</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.Track">
            <summary>
            A track of media
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Track</c>.</para>
            <para>See <see cref="M:FFMSsharp.Index.GetTrack(System.Int32)">Index.GetTrack</see>, <see cref="M:FFMSsharp.VideoSource.GetTrack">VideoSource.GetTrack</see> or <see cref="M:FFMSsharp.AudioSource.GetTrack">AudioSource.GetTrack</see> on how to create a <see cref="T:FFMSsharp.Track">Track object</see>.</para>
            </remarks>
        </member>
        <member name="M:FFMSsharp.Track.GetNumFrames">
            <summary>
            The number of frames in the track
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetNumFrames</c>.</para>
            <para>For a video track this is the number of video frames, for an audio track it's the number of packets.</para>
            <para>A return value of 0 indicates the track has not been indexed.</para>
            </remarks>
            <returns>Number of frames</returns>
        </member>
        <member name="M:FFMSsharp.Track.WriteTimecodes(System.String)">
            <summary>
            Writes timecodes for the track to disk
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_WriteTimecodes</c>.</para>
            <para>Writes Matroska v2 timecodes for the track to the given file.</para>
            <para>Only meaningful for video tracks. </para>
            </remarks>
            <param name="TimecodeFile">Can be a relative or absolute path. The file will be truncated and overwritten if it already exists.</param>
            <exception cref="T:FFMSsharp.FFMSException"/>
        </member>
        <member name="M:FFMSsharp.Track.GetFrameInfo(System.Int32)">
            <summary>
            Gets information about a specific frame
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetFrameInfo</c>.</para>
            <para>Gets information about the given frame (identified by its frame number) from the indexing information in the <see cref="T:FFMSsharp.Track">Track object</see> and returns it as a <see cref="T:FFMSsharp.FrameInfo">FrameInfo object</see>.</para>
            </remarks>
            <param name="Frame">Frame number</param>
            <returns>The generated <see cref="T:FFMSsharp.FrameInfo">FrameInfo object</see>.</returns>
        </member>
        <member name="P:FFMSsharp.Track.TimeBaseNumerator">
            <summary>
            The basic time unit of the track
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_TrackTimeBase</c> and <c>FFMS_GetTimeBase</c>.</para>
            <para>Only meaningful for video tracks.</para>
            <para>Note that while this rational number may occasionally turn out to be equal to 1/framerate for some CFR video tracks, it really has no relation whatsoever with the video framerate and you should definitely not assume anything framerate-related based on it.</para>
            </remarks>
            <seealso cref="P:FFMSsharp.Track.TimeBaseDenominator"/>
        </member>
        <member name="P:FFMSsharp.Track.TimeBaseDenominator">
            <summary>
            The basic time unit of the track
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_TrackTimeBase</c> and <c>FFMS_GetTimeBase</c>.</para>
            <para>Only meaningful for video tracks.</para>
            <para>Note that while this rational number may occasionally turn out to be equal to 1/framerate for some CFR video tracks, it really has no relation whatsoever with the video framerate and you should definitely not assume anything framerate-related based on it.</para>
            </remarks>
            <seealso cref="P:FFMSsharp.Track.TimeBaseNumerator"/>
        </member>
        <member name="P:FFMSsharp.Track.Type">
            <summary>
            The <see cref="F:FFMSsharp.Track.TrackType"/> of the track
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetTrackType</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.Resizers">
            <summary>
            Describes various image resizing algorithms
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Resizers</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Resizers.BilinearFast">
            <summary>
            Bilinear (Fast)
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_RESIZERS_FAST_BILINEAR</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Resizers.Bilinear">
            <summary>
            Bilinear
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_RESIZERS_BILINEAR</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Resizers.Bicubic">
            <summary>
            Bicubic
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_RESIZERS_BICUBIC</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Resizers.X">
            <summary>
            X
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_RESIZERS_X</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Resizers.Point">
            <summary>
            Point
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_RESIZERS_POINT</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Resizers.Area">
            <summary>
            Area
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_RESIZERS_AREA</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Resizers.BicubLin">
            <summary>
            Bicubic (Linear) <!-- I think? -->
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_RESIZERS_BICUBLIN</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Resizers.Gauss">
            <summary>
            Gauss
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_RESIZERS_GAUSS</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Resizers.Sinc">
            <summary>
            Sinc
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_RESIZERS_SINC</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Resizers.Lanczos">
            <summary>
            Lanczos
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_RESIZERS_LANCZOS</c>.</para>
            </remarks>
        </member>
        <member name="F:FFMSsharp.Resizers.Spline">
            <summary>
            Spline
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_RESIZERS_SPLINE</c>.</para>
            </remarks>
        </member>
        <member name="T:FFMSsharp.VideoSource">
            <summary>
            Video source
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_VideoSource</c>.</para>
            <para>See <see cref="M:FFMSsharp.Index.VideoSource(System.String,System.Int32,System.Int32,FFMSsharp.SeekMode)">Index.VideoSource</see> on how to create a <see cref="T:FFMSsharp.VideoSource">VideoSource object</see>.</para>
            <para>Note that there is no equivalent for FFMS2's <c>FFMS_GetVideoProperties</c> as it is called during construction of the <see cref="T:FFMSsharp.VideoSource">VideoSource object</see>.</para>
            </remarks>
        </member>
        <member name="M:FFMSsharp.VideoSource.Finalize">
            <summary>
            Video source destructor
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_DestroyVideoSource</c>.</para>
            </remarks>
        </member>
        <member name="M:FFMSsharp.VideoSource.SetOutputFormat(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32,FFMSsharp.Resizers)">
            <summary>
            Sets the output format for video frames
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS2_SetOutputFormatV2</c>.</para>
            </remarks>
            <param name="TargetFormats">The desired output colorspace(s)
            <para>The destination that gives the least lossy conversion from the source colorspace will automatically be selected, ON A FRAME BASIS.</para>
            <para>To get the integer constant representing a given colorspace, see <see cref="M:FFMSsharp.FFMS2.GetPixFmt(System.String)">GetPixFmt</see>.</para>
            </param>
            <param name="Width">The desired image width, in pixels
            <para>If you do not want to resize just pass the input dimensions.</para>
            </param>
            <param name="Height">The desired image height, in pixels
            <para>If you do not want to resize just pass the input dimensions.</para>
            </param>
            <param name="Resizer">The desired image resizing algorithm.
            <para>You must choose one even if you're not actually rescaling the image, because the video may change resolution mid-stream and then you will be using a resizer whether you want it or not (you will only know that the resolution changed after you actually decoded a frame with a new resolution), and it may also get used for rescaling subsampled chroma planes.</para>
            </param>
            <seealso cref="M:FFMSsharp.VideoSource.ResetOutputFormat"/>
            <exception cref="T:System.ArgumentOutOfRangeException">Trying to set the desired image resolution to an invalid size like 0, 0.</exception>
            <exception cref="T:System.ArgumentException">Trying to set an invalid output format.</exception>
        </member>
        <member name="M:FFMSsharp.VideoSource.ResetOutputFormat">
            <summary>
            Resets the video output format
            </summary>
            <param>
            <para>In FFMS2, the equivalent is <c>FFMS_ResetOutputFormatV</c>.</para>
            <para>Resets the output format so that no conversion takes place.</para>
            <para>Note that the results of this function may vary wildly, particularly if the video changes resolution mid-stream.</para>
            <para>If you call it, you'd better call <see cref="M:FFMSsharp.VideoSource.GetFrame(System.Int32)">GetFrame</see> afterwards and examine the properties to see what you actually ended up with.</para>
            </param>
        </member>
        <member name="M:FFMSsharp.VideoSource.SetInputFormat(FFMSsharp.ColorSpaces,FFMSsharp.ColorRanges)">
            <summary>
            Override the source format for video frames
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS2_SetInputFormatV</c>.</para>
            <para>Override the source colorspace passed to SWScale for conversions and resizing for all further calls to <see cref="M:FFMSsharp.VideoSource.GetFrame(System.Int32)">GetFrame</see>, until the next time you call <see cref="M:FFMSsharp.VideoSource.SetInputFormat(FFMSsharp.ColorSpaces,FFMSsharp.ColorRanges)">SetInputFormat</see> or <see cref="M:FFMSsharp.VideoSource.ResetInputFormat">ResetInputFormat</see>.</para>
            <para>This is intended primarily for compatibility with programs which use the wrong YUV colorspace when converting to or from RGB, but can also be useful for files which have incorrect colorspace flags.</para>
            <para>Values passed are not checked for sanity; if you wish you may tell FFMS2 to pretend that a RGB files is actually YUV using this function, but doing so is unlikely to have useful results.</para>
            <para>This function only has an effect if the output format is also set with <see cref="M:FFMSsharp.VideoSource.SetOutputFormat(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32,FFMSsharp.Resizers)">SetOutputFormat</see>.</para>
            </remarks>
            <param name="ColorSpace">The desired input colorspace</param>
            <param name="ColorRange">The desired input colorrange</param>
            <exception cref="T:FFMSsharp.FFMSException"/>
            <seealso cref="M:FFMSsharp.VideoSource.ResetInputFormat"/>
        </member>
        <member name="M:FFMSsharp.VideoSource.SetInputFormat(System.Int32,FFMSsharp.ColorSpaces,FFMSsharp.ColorRanges)">
            <summary>
            Override the source format for video frames
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS2_SetInputFormatV</c>.</para>
            <para>Override the source colorspace passed to SWScale for conversions and resizing for all further calls to <see cref="M:FFMSsharp.VideoSource.GetFrame(System.Int32)">GetFrame</see>, until the next time you call <see cref="M:FFMSsharp.VideoSource.SetInputFormat(System.Int32,FFMSsharp.ColorSpaces,FFMSsharp.ColorRanges)">SetInputFormat</see> or <see cref="M:FFMSsharp.VideoSource.ResetInputFormat">ResetInputFormat</see>.</para>
            <para>This is intended primarily for compatibility with programs which use the wrong YUV colorspace when converting to or from RGB, but can also be useful for files which have incorrect colorspace flags.</para>
            <para>Values passed are not checked for sanity; if you wish you may tell FFMS2 to pretend that a RGB files is actually YUV using this function, but doing so is unlikely to have useful results.</para>
            <para>This function only has an effect if the output format is also set with <see cref="M:FFMSsharp.VideoSource.SetOutputFormat(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32,FFMSsharp.Resizers)">SetOutputFormat</see>.</para>
            </remarks>
            <param name="PixelFormat">The desired input pixel format</param>
            <param name="ColorSpace">The desired input colorspace</param>
            <param name="ColorRange">The desired input colorrange</param>
            <exception cref="T:FFMSsharp.FFMSException"/>
            <seealso cref="M:FFMSsharp.VideoSource.ResetInputFormat"/>
        </member>
        <member name="M:FFMSsharp.VideoSource.ResetInputFormat">
            <summary>
            Resets the video input format to the values specified in the source file
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_ResetInputFormatV</c>.</para>
            </remarks>
            <seealso cref="M:FFMSsharp.VideoSource.SetInputFormat(FFMSsharp.ColorSpaces,FFMSsharp.ColorRanges)"/>
            <seealso cref="M:FFMSsharp.VideoSource.SetInputFormat(System.Int32,FFMSsharp.ColorSpaces,FFMSsharp.ColorRanges)"/>
        </member>
        <member name="M:FFMSsharp.VideoSource.GetFrame(System.Int32)">
            <summary>
            Retrieves a video frame
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetFrame</c>.</para>
            <para>The returned frame is owned by the given <see cref="T:FFMSsharp.VideoSource">VideoSource object</see>, and remains valid until the video source is destroyed, a different frame is requested from the video source, or the video source's input or output format is changed.</para>
            </remarks>
            <param name="Frame">The frame number to get
            <para>Frame numbering starts from zero, and hence the first frame is number 0 (not 1) and the last frame is number <see cref="P:FFMSsharp.VideoSource.NumFrames">NumFrames</see> - 1.</para>
            </param>
            <returns>The generated <see cref="T:FFMSsharp.Frame">Frame object</see>.</returns>
            <exception cref="T:FFMSsharp.FFMSException"/>
            <seealso cref="M:FFMSsharp.VideoSource.GetFrame(System.Double)"/>
            <exception cref="T:System.ArgumentOutOfRangeException">Trying to access a Frame that doesn't exist.</exception>
        </member>
        <member name="M:FFMSsharp.VideoSource.GetFrame(System.Double)">
            <summary>
            Retrieves a video frame at a timestamp
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetFrameByTime</c>.</para>
            <para>The returned frame is owned by the given <see cref="T:FFMSsharp.VideoSource">VideoSource object</see>, and remains valid until the video source is destroyed, a different frame is requested from the video source, or the video source's input or output format is changed.</para>
            <para>Does the exact same thing as <see cref="M:FFMSsharp.VideoSource.GetFrame(System.Int32)">GetFrame</see> except instead of giving it a frame number you give it a timestamp in seconds, and it will retrieve the frame that starts closest to that timestamp.</para>
            <para>This function exists for the people who are too lazy to build and traverse a mapping between frame numbers and timestamps themselves.</para>
            </remarks>
            <param name="Time">Timestamp</param>
            <returns>The generated <see cref="T:FFMSsharp.Frame">Frame object</see>.</returns>
            <exception cref="T:FFMSsharp.FFMSException"/>
            <seealso cref="M:FFMSsharp.VideoSource.GetFrame(System.Int32)"/>
            <exception cref="T:System.ArgumentOutOfRangeException">Trying to access a Frame that doesn't exist.</exception>
        </member>
        <member name="M:FFMSsharp.VideoSource.GetTrack">
            <summary>
            Retrieves track info
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetTrackFromVideo</c>.</para>
            <para>It's generally safer to use this function instead of <see cref="M:FFMSsharp.Index.GetTrack(System.Int32)">Index.GetTrack</see>, since unlike that function it cannot cause access violations if you specified an nonexistent track number, return a <see cref="T:FFMSsharp.Track">Track object</see> that doesn't actually contain any indexing information, or return an object that ceases to be valid when the index is destroyed.</para>
            <para>Note that the returned <see cref="T:FFMSsharp.Track">Track object</see> is only valid until its parent <see cref="T:FFMSsharp.VideoSource">VideoSource object</see> is destroyed. </para>
            </remarks>
            <returns>The generated <see cref="T:FFMSsharp.Track">Track object</see></returns>
        </member>
        <member name="P:FFMSsharp.VideoSource.FPSNumerator">
            <summary>
            The nominal framerate of the track
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_VideoProperties-&gt;FPSNumerator</c>.</para>
            <para>For Matroska files, this number is based on the average frame duration of all frames, while for everything else it's based on the duration of the first frame.</para>
            <para>While it might seem tempting to use these values to extrapolate wallclock timestamps for each frame, you really shouldn't do that since it makes your code unable to handle variable framerate properly.</para>
            <para>The ugly reality is that these values are pretty much only useful for informational purposes; they are only somewhat reliable for antiquated containers like AVI.</para>
            <para>Normally they should never be used for practical purposes; generate individual frame timestamps from <see cref="P:FFMSsharp.FrameInfo.PTS">FrameInfo.PTS</see> instead.</para>
            </remarks>
            <seealso cref="P:FFMSsharp.VideoSource.FPSDenominator"/>
        </member>
        <member name="P:FFMSsharp.VideoSource.FPSDenominator">
            <summary>
            The nominal framerate of the track
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_VideoProperties-&gt;FPSDenominator</c>.</para>
            <para>For Matroska files, this number is based on the average frame duration of all frames, while for everything else it's based on the duration of the first frame.</para>
            <para>While it might seem tempting to use these values to extrapolate wallclock timestamps for each frame, you really shouldn't do that since it makes your code unable to handle variable framerate properly.</para>
            <para>The ugly reality is that these values are pretty much only useful for informational purposes; they are only somewhat reliable for antiquated containers like AVI.</para>
            <para>Normally they should never be used for practical purposes; generate individual frame timestamps from <see cref="P:FFMSsharp.FrameInfo.PTS">FrameInfo.PTS</see> instead.</para>
            </remarks>
            <seealso cref="P:FFMSsharp.VideoSource.FPSNumerator"/>
        </member>
        <member name="P:FFMSsharp.VideoSource.RFFNumerator">
            <summary>
            The special RFF timebase
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_VideoProperties-&gt;RFFNumerator</c>.</para>
            </remarks>
            <seealso cref="P:FFMSsharp.Frame.RepeatPict"/>
            <seealso cref="P:FFMSsharp.VideoSource.RFFDenominator"/>
        </member>
        <member name="P:FFMSsharp.VideoSource.RFFDenominator">
            <summary>
            The special RFF timebase
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_VideoProperties-&gt;RFFDenominator</c>.</para>
            </remarks>
            <seealso cref="P:FFMSsharp.Frame.RepeatPict"/>
            <seealso cref="P:FFMSsharp.VideoSource.RFFNumerator"/>
        </member>
        <member name="P:FFMSsharp.VideoSource.NumFrames">
            <summary>
            The number of frames in the video track
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_VideoProperties->NumFrames</c>.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.VideoSource.SampleAspectRatioNumerator">
            <summary>
            Sample aspect ratio of the video frames
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_VideoProperties-&gt;SARNum</c> and <c>SARDen</c>.</para>
            <para>Note that this is a metadata setting that you are free to ignore, but if you want the proper display aspect ratio with anamorphic material, you should honor it.</para>
            <para>On the other hand, there are situations (like when encoding) where you should probably ignore it because the user expects it to be ignored.</para>
            </remarks>
            <seealso cref="P:FFMSsharp.VideoSource.SampleAspectRatioDenominator"/>
        </member>
        <member name="P:FFMSsharp.VideoSource.SampleAspectRatioDenominator">
            <summary>
            Sample aspect ratio of the video frames
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_VideoProperties-&gt;SARNum</c> and <c>SARDen</c>.</para>
            <para>Note that this is a metadata setting that you are free to ignore, but if you want the proper display aspect ratio with anamorphic material, you should honor it.</para>
            <para>On the other hand, there are situations (like when encoding) where you should probably ignore it because the user expects it to be ignored.</para>
            </remarks>
            <seealso cref="P:FFMSsharp.VideoSource.SampleAspectRatioNumerator"/>
        </member>
        <member name="P:FFMSsharp.VideoSource.Crop">
            <summary>
            The number of pixels you should crop the frame before displaying it
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_VideoProperties-&gt;CropTop</c>, <c>CropBottom</c>, <c>CropLeft</c> and <c>CropRight</c>.</para>
            </remarks>
            <seealso cref="T:FFMSsharp.Selection"/>
        </member>
        <member name="P:FFMSsharp.VideoSource.TopFieldFirst">
            <summary>
            Is the top field first?
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_VideoProperties->TopFieldFirst</c>.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.VideoSource.FirstTime">
            <summary>
            The first timestamp of the stream, in seconds
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_VideoProperties-&gt;FirstTime</c>.</para>
            <para>Useful if you want to know if the stream has a delay, or for quickly determining its length in seconds.</para>
            </remarks>
            <seealso cref="P:FFMSsharp.VideoSource.LastTime"/>
        </member>
        <member name="P:FFMSsharp.VideoSource.LastTime">
            <summary>
            The first timestamp of the stream, in seconds
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_VideoProperties-&gt;LastTime</c>.</para>
            <para>Useful if you want to know if the stream has a delay, or for quickly determining its length in seconds.</para>
            </remarks>
            <seealso cref="P:FFMSsharp.VideoSource.FirstTime"/>
        </member>
        <member name="T:FFMSsharp.AvLogLevel">
            <summary>
            Log level for libavformat
            </summary>
        </member>
        <member name="F:FFMSsharp.AvLogLevel.Quiet">
            <summary>
            No output
            </summary>
        </member>
        <member name="F:FFMSsharp.AvLogLevel.Panic">
            <summary>
            Something went really wrong and we will crash now
            </summary>
        </member>
        <member name="F:FFMSsharp.AvLogLevel.Fatal">
            <summary>
            Something went wrong and recovery is not possible
            </summary>
            <remarks>
            For example, no header was found for a format which depends
            on headers or an illegal combination of parameters is used.
            </remarks>
        </member>
        <member name="F:FFMSsharp.AvLogLevel.Error">
            <summary>
            Something went wrong and cannot losslessly be recovered
            </summary>
            <remarks>
            However, not all future data is affected.
            </remarks>
        </member>
        <member name="F:FFMSsharp.AvLogLevel.Warning">
            <summary>
            Something somehow does not look correct
            </summary>
            <remarks>
            This may or may not lead to problems. An example would be the use of '-vstrict -2'.
            </remarks>
        </member>
        <member name="F:FFMSsharp.AvLogLevel.Info">
            <summary>
            Show regular information
            </summary>
        </member>
        <member name="F:FFMSsharp.AvLogLevel.Verbose">
            <summary>
            Show lots of information
            </summary>
        </member>
        <member name="F:FFMSsharp.AvLogLevel.Debug">
            <summary>
            Stuff which is only useful for libav* developers
            </summary>
        </member>
        <member name="T:FFMSsharp.Selection">
            <summary>
            Simple representation of a selection rectangle
            </summary>
        </member>
        <member name="F:FFMSsharp.Selection.Top">
            <summary>
            Amount of Top to crop
            </summary>
        </member>
        <member name="F:FFMSsharp.Selection.Left">
            <summary>
            Amount of Left to crop
            </summary>
        </member>
        <member name="F:FFMSsharp.Selection.Right">
            <summary>
            Amount of Right to crop
            </summary>
        </member>
        <member name="F:FFMSsharp.Selection.Bottom">
            <summary>
            Amount of Bottom to crop
            </summary>
        </member>
        <member name="T:FFMSsharp.FFMS2">
            <summary>
            Container for generic FFMS2 functions
            </summary>
        </member>
        <member name="M:FFMSsharp.FFMS2.Initialize(System.String)">
            <summary>
            Initialize the FFMS2 library
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_Init</c>.</para>
            <para>Must be called before anything else.</para>
            </remarks>
        </member>
        <member name="M:FFMSsharp.FFMS2.IsSourcePresent(FFMSsharp.Sources)">
            <summary>
            Is the source compiled in the library?
            </summary>
            <param name="option">The source in question</param>
            <returns>The result</returns>
        </member>
        <member name="M:FFMSsharp.FFMS2.IsSourceEnabled(FFMSsharp.Sources)">
            <summary>
            Is the source currently enabled?
            </summary>
            <param name="option">The source in question</param>
            <returns>The result</returns>
        </member>
        <member name="M:FFMSsharp.FFMS2.GetVersion">
            <summary>
            Get the FFMS_VERSION constant
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetVersion</c>.</para>
            <para>You may want to use <see cref="M:FFMSsharp.FFMS2.GetVersionString">GetVersionString</see> if you just want to print the version.</para>
            </remarks>
            <returns>FFMS_VERSION constant as defined in ffms.h as an integer</returns>
            <seealso cref="M:FFMSsharp.FFMS2.GetVersionString"/>
        </member>
        <member name="M:FFMSsharp.FFMS2.GetVersionString">
            <summary>
            Get a human-readable version of the FFMS_VERSION constant
            </summary>
            <returns>A pretty version string</returns>
            <seealso cref="M:FFMSsharp.FFMS2.GetVersion"/>
        </member>
        <member name="M:FFMSsharp.FFMS2.GetLogLevel">
            <summary>
            Gets FFmpeg message level
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetLogLevel</c>.</para>
            </remarks>
            <returns>The result</returns>
        </member>
        <member name="M:FFMSsharp.FFMS2.SetLogLevel(FFMSsharp.AvLogLevel)">
            <summary>
            Sets FFmpeg message level
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_SetLogLevel</c>.</para>
            </remarks>
            <param name="Level">The new message level</param>
        </member>
        <member name="M:FFMSsharp.FFMS2.GetPixFmt(System.String)">
            <summary>
            Gets a colorspace identifier from a colorspace name
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetPixFmt</c>.</para>
            <para>Translates a given pixel format name to an integer constant representing it, suitable for passing to <see cref="M:FFMSsharp.VideoSource.SetOutputFormat(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32,FFMSsharp.Resizers)">VideoSource.SetOutputFormat</see>.</para>
            <para>This function exists so that you don't have to include a FFmpeg header file in every single program you ever write.</para>
            <para>For a list of colorspaces and their names, see libavutil/pixfmt.h.</para>
            <para>To get the name of a colorspace, strip the leading PIX_FMT_ and convert the remainder to lowercase.</para>
            <para>For example, the name of PIX_FMT_YUV420P is yuv420p.</para>
            <para>It is strongly recommended to use this function instead of including pixfmt.h directly, since this function guarantees that you will always get the constant definitions from the version of FFmpeg that FFMS2 was linked against.</para>
            </remarks>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="P:FFMSsharp.FFMS2.Initialized">
            <summary>
            Is FFMS2 initialized?
            </summary>
        </member>
        <member name="P:FFMSsharp.FFMS2.PresentSources">
            <summary>
            Source modules that the library was compiled with
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetPresentSources</c>.</para>
            </remarks>
        </member>
        <member name="P:FFMSsharp.FFMS2.EnabledSources">
            <summary>
            Source modules that are actually available for use
            </summary>
            <remarks>
            <para>In FFMS2, the equivalent is <c>FFMS_GetEnabledSources</c>.</para>
            </remarks>
        </member>
    </members>
</doc>
